{"ts":1349469370510,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1349469387866,"patch":[[{"diffs":[[1,"import math\r\n\r\nimport bpy\r\nimport mathutils\r\n\r\nX = mathutils.Vector(1, 0, 0)\r\nY = mathutils.Vector(0, 1, 0)\r\nZ = mathutils.Vector(0, 0, 1)\r\n\r\ndef get_roatation(normal):\r\n    # Define local axes\r\n    normal_z = normal\r\n    normal_x = Z.cross(normal_z)\r\n    normal_y = normal_z.cross(normal_x)\r\n    \r\n    # Get rotation angles\r\n    angle_z = math.atan2(normal_x.y, normal_x.x)\r\n    \r\n    mat_rotate_z = mathutils.Matrix.Rotation(-angle_z, 4, 'Z')\r\n    normal_y_rotated = mat_rotate_z * normal_y\r\n    angle_y = math.atan2(normal_y_rotated.z, normal_y_rotated.y)\r\n    \r\n    return (0, angle_y, angle_z)"]],"start1":0,"start2":0,"length1":0,"length2":598}]],"length":598,"saved":false}
{"ts":1349469438361,"patch":[[{"diffs":[[0,"tor("],[1,"("],[0,"1, 0, 0)"],[1,")"],[0,"\r\nY "]],"start1":64,"start2":64,"length1":16,"length2":18},{"diffs":[[0,"tor("],[1,"("],[0,"0, 1, 0)"],[1,")"],[0,"\r\nZ "]],"start1":97,"start2":97,"length1":16,"length2":18},{"diffs":[[0,"tor("],[1,"("],[0,"0, 0, 1)"],[1,")"],[0,"\r\n\r\n"]],"start1":130,"start2":130,"length1":16,"length2":18}]],"length":604,"saved":false}
{"ts":1349469563876,"patch":[[{"diffs":[[0,"f get_ro"],[-1,"a"],[0,"tation(n"]],"start1":150,"start2":150,"length1":17,"length2":16},{"diffs":[[0,"angle_z)"],[1,"\r\n\r\nnormal = bpy.context.selected_objects[0].data.polygons[0].normal\r\nprint(get_rotation(normal))"]],"start1":595,"start2":595,"length1":8,"length2":105}]],"length":700,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349476524710,"patch":[[{"diffs":[[0,"rmal):\r\n"],[1,"    # Make sure the normal is not the Z axis\r\n    if normal.x == normal.y == 0:\r\n        return (0, 0, 0)\r\n    \r\n"],[0,"    # De"]],"start1":167,"start2":167,"length1":16,"length2":129},{"diffs":[[0,"e_z)\r\n\r\n"],[1,"\r\n"],[0,"normal ="]],"start1":712,"start2":712,"length1":16,"length2":18},{"diffs":[[0,"normal\r\n"],[1,"print(normal)\r\n"],[0,"print(ge"]],"start1":780,"start2":780,"length1":16,"length2":31}]],"length":830,"saved":false}
{"ts":1349477190475,"patch":[[{"diffs":[[0,"e_z)\r\n\r\n"],[1,"def rotation_matrix(x, y, z):\r\n    def rot_mat(*args): return mathutils.Matrix.Rotation(*args)\r\n    return rot_mat(z, 4, 'Z') * rot_mat(y, 4, 'Y') * rot_mat(x, 4, 'X')\r\n\r\ndef flatten_face(face, mesh):\r\n    rotation = get_rotation(face.normal)\r\n"],[0,"\r\nnormal"]],"start1":712,"start2":712,"length1":16,"length2":260}]],"length":1074,"saved":false}
{"ts":1349478252798,"patch":[[{"diffs":[[0,"\r\n\r\ndef "],[-1,""],[0,""],[1,"create_"],[0,"rotation"]],"start1":716,"start2":716,"length1":16,"length2":23},{"diffs":[[0,"    "],[-1,"rotation = get_rotation(face.normal)\r\n\r\nnormal = bpy.context.selected_objects[0].data.polygons[0].normal\r\nprint(normal)\r\nprint(get_rotation(normal"],[1,"# Create the rotation matrix to reverse the rotation\r\n    rotation = get_rotation(face.normal)\r\n    print (rotation)\r\n    rotation_matrix = create_rotation_matrix(*rotation)\r\n    print (rotation_matrix)\r\n    inverse_rotation_matrix = rotation_matrix.transposed()\r\n    \r\n    flattened_verts = []\r\n    \r\n#    for vert in (mesh.vertices[i].co for i in face.vertices):\r\n#        flattened_verts.append(inverse_rotation_matrix * vert)\r\n    for i in face.vertices:\r\n        mesh.vertices[i].co = inverse_rotation_matrix * mesh.vertices[i].co\r\n        \r\n    return flattened_verts\r\n    \r\n\r\nnormal = bpy.context.selected_objects[0].data.polygons[0].normal\r\nprint(normal)\r\nprint(get_rotation(normal))\r\nprint()\r\nprint(flatten_face(bpy.context.selected_objects[0].data.polygons[0], bpy.context.selected_objects[0].data"],[0,"))"]],"start1":929,"start2":929,"length1":152,"length2":813}]],"length":1742,"saved":false}
